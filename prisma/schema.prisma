
generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/ai-quiz-builder/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model QuizSession {
  id          String   @id @default(cuid())
  code        String   @unique
  topic       String
  status      String   @default("waiting") // waiting, active, completed
  hostName    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  participants Participant[]
  questions    Question[]
  
  @@map("quiz_sessions")
}

model Participant {
  id        String   @id @default(cuid())
  name      String
  score     Int      @default(0)
  joinedAt  DateTime @default(now())
  
  sessionId String
  session   QuizSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  answers   Answer[]
  
  @@map("participants")
}

model Question {
  id             String   @id @default(cuid())
  questionText   String
  options        String[] // Array of 4 options
  correctAnswer  Int      // Index of correct option (0-3)
  questionNumber Int
  
  sessionId String
  session   QuizSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  answers   Answer[]
  
  @@map("questions")
}

model Answer {
  id             String   @id @default(cuid())
  selectedAnswer Int?     // Index of selected option (0-3), null if not answered
  isCorrect      Boolean  @default(false)
  answeredAt     DateTime @default(now())
  
  participantId String
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  @@map("answers")
}
